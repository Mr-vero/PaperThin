<template>
  <div class="page" data-name="home">
    <!-- Top Navbar -->
    <div class="navbar navbar-large navbar-transparent no-outline">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <div class="logo">Paper<span>Thin</span></div>
        </div>
        <div class="right">
          <a href="#" class="link icon-only searchbar-enable" data-searchbar=".searchbar-wallpapers">
            <i class="icon f7-icons if-not-md">search</i>
            <i class="icon material-icons if-md">search</i>
          </a>
        </div>
        <form class="searchbar searchbar-wallpapers">
          <div class="searchbar-inner">
            <div class="searchbar-input-wrap">
              <input type="search" placeholder="Search wallpapers"/>
              <i class="searchbar-icon"></i>
              <span class="input-clear-button"></span>
            </div>
            <span class="searchbar-disable-button">Cancel</span>
          </div>
        </form>
      </div>
    </div>

    <!-- Searchbar overlay -->
    <div class="searchbar-overlay"></div>

    <!-- Scrollable page content-->
    <div class="page-content ptr-content infinite-scroll-content ${selectionMode ? 'selection-mode' : ''}" 
         @ptr:refresh=${onRefresh} 
         @infinite=${loadMore}
         data-infinite-distance="50">
      
      <!-- Pull to refresh preloader -->
      <div class="ptr-preloader">
        <div class="preloader"></div>
        <div class="ptr-arrow"></div>
      </div>
      
      <!-- Wallpapers Grid -->
      <div class="wallpapers-grid">
        ${wallpapers.map((wallpaper) => $h`
          <div class="wallpaper-item elevation-2" 
               @click=${selectionMode ? () => toggleSelection(wallpaper) : () => openWallpaper(wallpaper)}
               @touchstart=${(e) => handleTouchStart(e, wallpaper)}
               @touchend=${handleTouchEnd}
               @touchmove=${handleTouchMove}>
            ${selectionMode && $h`
              <div class="selection-checkbox ${selectedWallpapers.includes(wallpaper) ? 'selected' : ''}">
                <i class="icon f7-icons">checkmark_circle_fill</i>
              </div>
            `}
            <div class="progressive-image ${wallpaper.loaded ? 'loaded' : ''}">
              <img 
                class="full-image"
                src="${wallpaper.path}" 
                loading="lazy" 
                alt="${wallpaper.title}"
                @load=${() => handleImageLoad(wallpaper)}
                @error=${(e) => handleImageError(e, wallpaper)}
              />
            </div>
            <div class="wallpaper-info">
              <span class="resolution">${wallpaper.resolution}</span>
              <div class="stats">
                <span><i class="icon f7-icons">eye</i> ${wallpaper.views}</span>
                <span><i class="icon f7-icons">heart</i> ${wallpaper.favorites}</span>
              </div>
            </div>
          </div>
        `)}
      </div>

      <!-- Loading spinner -->
      ${loading && $h`
        <div class="preloader infinite-scroll-preloader"></div>
      `}

      ${noMoreItems && $h`
        <div class="block block-strong text-align-center no-more">
          <span>You've reached the end</span>
        </div>
      `}
    </div>

    <!-- Categories -->
    <div class="categories-scrollbar">
      <div class="categories">
        ${categories.map((category) => $h`
          <a href="#" 
             class="category-chip ${currentCategory === category.id ? 'active' : ''}"
             data-category="${category.id}"
             @click=${() => handleCategoryClick(category.id)}>
            ${category.name}
          </a>
        `)}
      </div>
    </div>

    <!-- Selection mode toolbar -->
    ${selectionMode && $h`
      <div class="toolbar toolbar-bottom selection-toolbar">
        <div class="toolbar-inner">
          <a href="#" class="link" @click=${() => addToCollection()}>
            <i class="icon f7-icons">plus_square_fill</i>
            <span>Add to Collection</span>
          </a>
          <a href="#" class="link" @click=${() => cancelSelection()}>
            <span>Cancel</span>
          </a>
        </div>
      </div>
    `}
  </div>
</template>

<script>
export default (props, { $f7, $store, $on, $update }) => {
  let wallpapers = [];
  let loading = false;
  let page = 1;
  let noMoreItems = false;
  let searchTimeout;
  let originalWallpapers = [];
  let currentCategory = 'all';
  let selectionMode = false;
  let selectedWallpapers = [];
  let longPressTimer;
  let touchMoved = false;
  
  // Define categories with proper API values
  const categories = [
    { id: 'all', name: 'All' },
    { id: 'general', name: 'General' },
    { id: 'anime', name: 'Anime' },
    { id: 'people', name: 'People' },
    { id: 'landscape', name: 'Landscape' },
    { id: 'space', name: 'Space' },
    { id: 'digital', name: 'Digital Art' },
    { id: 'minimal', name: 'Minimal' },
    { id: 'nature', name: 'Nature' },
    { id: 'cars', name: 'Cars' },
    { id: 'gaming', name: 'Gaming' },
    { id: 'technology', name: 'Technology' },
    { id: 'sketchy', name: 'ðŸ”ž Sketchy' },
    { id: 'nsfw', name: 'ðŸ”ž NSFW' }
  ];

  // Load initial wallpapers
  loadWallpapers();

  async function handleCategoryClick(categoryId) {
    console.log('Category clicked:', categoryId); // Debug log
    
    if (currentCategory === categoryId) return;
    
    $f7.preloader.show();
    
    try {
      currentCategory = categoryId;
      page = 1;
      wallpapers = [];
      noMoreItems = false;
      $update();
      
      console.log('Fetching category:', currentCategory); // Debug log
      
      const newWallpapers = await $store.dispatch('fetchWallpapers', { 
        page,
        category: currentCategory
      });
      
      console.log('New wallpapers:', newWallpapers); // Debug log
      
      if (newWallpapers && newWallpapers.length > 0) {
        wallpapers = newWallpapers;
        originalWallpapers = [...newWallpapers];
        page += 1;
      } else {
        noMoreItems = true;
      }
    } catch (error) {
      console.error('Error loading category:', error);
      $f7.toast.show({
        text: 'Error loading category',
        closeTimeout: 2000,
      });
    } finally {
      $f7.preloader.hide();
      $update();
    }
  }

  async function loadWallpapers(reset = false) {
    if (loading || (noMoreItems && !reset)) return;
    
    loading = true;
    $update();

    try {
      if (reset) {
        page = 1;
        wallpapers = [];
        noMoreItems = false;
      }

      const newWallpapers = await $store.dispatch('fetchWallpapers', { 
        page,
        category: currentCategory === 'all' ? null : currentCategory
      });
      
      if (!newWallpapers || newWallpapers.length === 0) {
        noMoreItems = true;
      } else {
        // If resetting or first page, replace wallpapers
        if (reset || page === 1) {
          wallpapers = newWallpapers;
          originalWallpapers = [...newWallpapers];
        } else {
          // Otherwise append new wallpapers
          wallpapers = [...wallpapers, ...newWallpapers];
        }
        page += 1;
      }
    } catch (error) {
      console.error('Error in loadWallpapers:', error);
      $f7.toast.show({
        text: 'Error loading wallpapers',
        closeTimeout: 2000,
      });
    }

    loading = false;
    $update();
  }

  function loadMore(e, done) {
    loadWallpapers().then(() => {
      if (done) done();
    });
  }

  function onRefresh(e, done) {
    loadWallpapers(true).then(() => {
      done();
    });
  }

  function openWallpaper(wallpaper) {
    $f7.views.main.router.navigate('/wallpaper/', {
      props: {
        wallpaper
      }
    });
  }

  function handleImageLoad(wallpaper) {
    wallpaper.loaded = true;
    $update();
  }

  function handleImageError(event, wallpaper) {
    const img = event.target;
    const currentUrl = img.src;
    
    // Try next fallback URL
    const nextUrl = wallpaper.fallbackUrls.find(url => url !== currentUrl);
    if (nextUrl) {
      img.src = nextUrl;
    }
  }

  // Initialize searchbar
  $on('pageInit', () => {
    const searchbar = $f7.searchbar.create({
      el: '.searchbar-wallpapers',
      searchContainer: '.wallpapers-grid',
      searchIn: '.wallpaper-item',
      customSearch: true,
      on: {
        search(sb, query, previousQuery) {
          if (query.length > 2) {
            // Show loading indicator
            $f7.preloader.show();
            
            // Debounce search to prevent too many requests
            if (searchTimeout) clearTimeout(searchTimeout);
            searchTimeout = setTimeout(async () => {
              try {
                const searchResults = await $store.dispatch('searchWallpapers', query);
                // Update the wallpapers array with search results
                wallpapers = searchResults;
                page = 1;
                noMoreItems = true; // Disable infinite scroll for search results
                $update(); // Force re-render
              } finally {
                $f7.preloader.hide();
              }
            }, 300);
          }
        },
        clear(sb) {
          // Restore original wallpapers
          wallpapers = [...originalWallpapers];
          page = Math.ceil(wallpapers.length / 24); // Assuming 24 items per page
          noMoreItems = false;
          $update();
        },
        disable() {
          // When search bar is closed
          wallpapers = [...originalWallpapers];
          page = Math.ceil(wallpapers.length / 24);
          noMoreItems = false;
          $update();
        }
      }
    });
  });

  // Hide navbar on scroll
  $on('pageInit', () => {
    const $pageContent = $f7.$('.page-content');
    let lastScrollTop = 0;
    
    $pageContent.on('scroll', (e) => {
      const scrollTop = e.target.scrollTop;
      const $navbar = $f7.$('.navbar');
      const $categoriesBar = $f7.$('.categories-scrollbar');
      
      if (scrollTop > lastScrollTop && scrollTop > 100) {
        // Scrolling down
        $navbar.addClass('navbar-hidden');
        $categoriesBar.addClass('categories-hidden');
      } else {
        // Scrolling up
        $navbar.removeClass('navbar-hidden');
        $categoriesBar.removeClass('categories-hidden');
      }
      
      lastScrollTop = scrollTop;
    });
  });

  // Cleanup on page leave
  $on('pageBeforeOut', () => {
    if (!infiniteScrollDetached) {
      $f7.infiniteScroll.detach('.infinite-scroll-content');
      infiniteScrollDetached = true;
    }
  });

  function enableSelectionMode(wallpaper) {
    selectionMode = true;
    selectedWallpapers = [wallpaper];
    // Hide main toolbar
    document.querySelector('.toolbar.tabbar-icons').classList.add('toolbar-hidden');
    $update();
  }

  function toggleSelection(wallpaper) {
    const index = selectedWallpapers.indexOf(wallpaper);
    if (index > -1) {
      selectedWallpapers.splice(index, 1);
    } else {
      selectedWallpapers.push(wallpaper);
    }
    if (selectedWallpapers.length === 0) {
      selectionMode = false;
    }
    $update();
  }

  async function addToCollection() {
    const collections = await $store.dispatch('fetchCollections');
    
    const buttons = [];
    
    // Add existing collections
    if (collections.length > 0) {
      buttons.push(...collections.map(c => ({
        text: c.name,
        onClick: async () => {
          $f7.preloader.show();
          try {
            await $store.dispatch('addToCollection', {
              collectionId: c.id,
              wallpapers: selectedWallpapers
            });
            $f7.toast.show({
              text: 'Added to collection',
              position: 'bottom',
              closeTimeout: 2000
            });
            cancelSelection();
          } catch (error) {
            $f7.toast.show({
              text: 'Failed to add to collection',
              position: 'bottom',
              closeTimeout: 2000
            });
          }
          $f7.preloader.hide();
        }
      })));
      
      // Add separator
      buttons.push({ text: '', label: true });
    }
    
    // Add "New Collection" button
    buttons.push({
      text: '<span class="color-primary">New Collection</span>',
      bold: true,
      onClick: () => {
        $f7.dialog.create({
          title: 'New Collection',
          text: 'Enter collection name',
          content: `
            <div class="dialog-input-field">
              <input type="text" class="dialog-input" placeholder="Collection name">
            </div>
          `,
          buttons: [
            {
              text: 'Cancel'
            },
            {
              text: 'Create',
              bold: true,
              onClick: async (dialog) => {
                const name = dialog.$el.find('.dialog-input').val();
                if (!name.trim()) return;
                
                $f7.preloader.show();
                try {
                  const collection = await $store.dispatch('createCollection', { name });
                  await $store.dispatch('addToCollection', {
                    collectionId: collection.id,
                    wallpapers: selectedWallpapers
                  });
                  $f7.toast.show({
                    text: 'Created collection and added wallpapers',
                    position: 'bottom',
                    closeTimeout: 2000
                  });
                  cancelSelection();
                } catch (error) {
                  $f7.toast.show({
                    text: 'Failed to create collection',
                    position: 'bottom',
                    closeTimeout: 2000
                  });
                }
                $f7.preloader.hide();
              }
            }
          ]
        }).open();
      }
    });

    // Show actions sheet
    $f7.actions.create({
      buttons: [buttons],
      closeOnSelect: true,
      animate: true
    }).open();
  }

  function cancelSelection() {
    selectionMode = false;
    selectedWallpapers = [];
    // Show main toolbar
    document.querySelector('.toolbar.tabbar-icons').classList.remove('toolbar-hidden');
    $update();
  }

  function handleTouchStart(e, wallpaper) {
    touchMoved = false;
    longPressTimer = setTimeout(() => {
      if (!touchMoved) {
        enableSelectionMode(wallpaper);
        // Add haptic feedback if available
        if (window.navigator && window.navigator.vibrate) {
          window.navigator.vibrate(50);
        }
      }
    }, 500); // 500ms for long press
  }

  function handleTouchEnd() {
    clearTimeout(longPressTimer);
  }

  function handleTouchMove() {
    touchMoved = true;
    clearTimeout(longPressTimer);
  }

  return $render;
}
</script>

<style>
:root {
  --f7-navbar-bg-color: #ffffff;
  --f7-navbar-height: 60px;
}

.navbar {
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
}

.navbar .logo {
  font-size: 20px;
  font-weight: 700;
  padding-left: 16px;
  color: #333;
}

.navbar .logo span {
  color: var(--f7-theme-color);
}

.categories-scrollbar {
  position: fixed;
  bottom: calc(var(--f7-toolbar-height) + 8px);
  left: 0;
  right: 0;
  z-index: 5000;
  background: transparent;
  transition: transform 0.3s ease;
  border-top: none;
  margin: 0;
  box-shadow: none;
}

.categories {
  padding: 8px 16px;
  margin: 0;
  display: flex;
  gap: 8px;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  scrollbar-width: none;
  -ms-overflow-style: none;
  scroll-behavior: smooth;
  background: linear-gradient(to top, rgba(0,0,0,0.1), transparent);
}

.categories::-webkit-scrollbar {
  display: none;
}

.category-chip {
  padding: 8px 16px;
  border-radius: 100px;
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  color: #666;
  font-size: 14px;
  white-space: nowrap;
  transition: all 0.3s ease;
  margin: 0 4px;
  text-decoration: none;
  user-select: none;
  -webkit-user-select: none;
}

.category-chip:active {
  transform: scale(0.95);
}

.category-chip.active {
  background: var(--f7-theme-color);
  color: #fff;
  font-weight: 500;
}

/* Special styling for NSFW categories */
.category-chip[data-category="sketchy"],
.category-chip[data-category="nsfw"] {
  background: rgba(255, 75, 62, 0.08);
  color: #ff4b3e;
}

.category-chip[data-category="sketchy"].active,
.category-chip[data-category="nsfw"].active {
  background: #ff4b3e;
  color: white;
}

.wallpapers-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 12px;
  padding: 12px;
  margin: 0;
  padding-top: 70px;
  padding-bottom: calc(var(--f7-toolbar-height) + 68px);
}

.wallpaper-item {
  position: relative;
  border-radius: 12px;
  overflow: hidden;
  aspect-ratio: 9/16;
  background: #f5f5f5;
  transition: transform 0.2s ease;
}

.wallpaper-item:active {
  transform: scale(0.98);
}

.wallpaper-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.wallpaper-info {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 12px;
  background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
  color: #fff;
  font-size: 12px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.wallpaper-item:hover .wallpaper-info {
  opacity: 1;
}

.wallpaper-info .resolution {
  font-weight: 500;
}

.wallpaper-info .stats {
  display: flex;
  gap: 12px;
  margin-top: 4px;
}

.wallpaper-info .stats span {
  display: flex;
  align-items: center;
  gap: 4px;
}

.wallpaper-info .stats i {
  font-size: 14px;
}

.no-more {
  color: #666;
  font-size: 14px;
  margin-top: 20px;
}

.infinite-scroll-preloader {
  margin-top: 20px;
  margin-bottom: 20px;
}

.searchbar {
  display: none; /* Hide by default */
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  background: #fff;
  z-index: 200;
}

.searchbar.searchbar-enabled {
  display: block;
}

.searchbar-overlay {
  display: none;
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.4);
  z-index: 100;
  animation: fadeIn 0.2s ease;
}

.searchbar-enabled ~ .searchbar-overlay {
  display: block;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.searchbar-inner {
  background: #f5f5f5;
  border-radius: 100px;
}

@media (max-width: 480px) {
  .wallpapers-grid {
    grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    gap: 8px;
    padding: 8px;
    padding-top: 70px;
  }
}

.progressive-image {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.progressive-image .placeholder {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  filter: blur(10px);
  transform: scale(1.1);
  transition: opacity 0.3s ease;
}

.progressive-image .full-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.progressive-image.loaded .placeholder {
  opacity: 0;
}

.progressive-image.loaded .full-image {
  opacity: 1;
}

.navbar, .categories-scrollbar {
  transition: transform 0.3s ease;
}

.navbar.navbar-hidden {
  transform: translateY(-100%);
}

.categories-scrollbar {
  position: sticky;
  top: var(--f7-navbar-height);
  z-index: 100;
  transition: transform 0.3s ease;
}

.categories-scrollbar.categories-hidden {
  transform: translateY(calc(100% + var(--f7-toolbar-height) + 8px));
}

.category-chip {
  padding: 8px 16px;
  border-radius: 100px;
  background: #f5f5f5;
  color: #666;
  font-size: 14px;
  white-space: nowrap;
  transition: all 0.3s ease;
  margin: 0 4px;
  text-decoration: none;
}

.category-chip.active {
  background: var(--f7-theme-color);
  color: #fff;
  font-weight: 500;
}

.page-content {
  padding-top: 0 !important;
}

.category-chip[data-category="sketchy"],
.category-chip[data-category="nsfw"] {
  background: #ff4b3e15;
  color: #ff4b3e;
}

.category-chip[data-category="sketchy"].active,
.category-chip[data-category="nsfw"].active {
  background: #ff4b3e;
  color: white;
}

.selection-checkbox {
  position: absolute;
  top: 8px;
  right: 8px;
  width: 24px;
  height: 24px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.9);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;
}

.selection-checkbox i {
  font-size: 24px;
  color: var(--f7-theme-color);
  opacity: 0;
  transition: opacity 0.2s ease;
}

.selection-checkbox.selected i {
  opacity: 1;
}

/* Add a subtle overlay when in selection mode */
.wallpaper-item {
  position: relative;
}

.wallpaper-item::after {
  content: '';
  position: absolute;
  inset: 0;
  background: rgba(0, 0, 0, 0.2);
  opacity: 0;
  transition: opacity 0.2s ease;
}

/* New class for selection mode */
.selection-mode .wallpaper-item::after {
  opacity: 1;
}

/* Add this CSS for the selection toolbar */
.toolbar.selection-toolbar {
  z-index: 6000; /* Higher than the main toolbar */
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.9);
  border-top: none;
  padding-bottom: env(safe-area-inset-bottom);
}
</style>