<template>
  <div class="page" data-name="home">
    <!-- Top Navbar -->
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <div class="logo">Paper<span>Thin</span></div>
        </div>
        <div class="right">
          <a href="#" class="link icon-only searchbar-enable" data-searchbar=".searchbar-wallpapers">
            <i class="icon f7-icons if-not-md">search</i>
            <i class="icon material-icons if-md">search</i>
          </a>
        </div>
        <form class="searchbar searchbar-wallpapers">
          <div class="searchbar-inner">
            <div class="searchbar-input-wrap">
              <input type="search" placeholder="Search wallpapers"/>
              <i class="searchbar-icon"></i>
              <span class="input-clear-button"></span>
            </div>
            <span class="searchbar-disable-button">Cancel</span>
          </div>
        </form>
      </div>
    </div>

    <!-- Searchbar overlay -->
    <div class="searchbar-overlay"></div>

    <!-- Categories -->
    <div class="categories-scrollbar">
      <div class="categories">
        <a href="#" class="category-chip active">All</a>
        <a href="#" class="category-chip">Nature</a>
        <a href="#" class="category-chip">Abstract</a>
        <a href="#" class="category-chip">Minimal</a>
        <a href="#" class="category-chip">Dark</a>
        <a href="#" class="category-chip">Anime</a>
        <a href="#" class="category-chip">Space</a>
      </div>
    </div>

    <!-- Scrollable page content-->
    <div class="page-content ptr-content infinite-scroll-content" 
         @ptr:refresh=${onRefresh} 
         @infinite=${loadMore}
         data-infinite-distance="50">
      
      <!-- Pull to refresh preloader -->
      <div class="ptr-preloader">
        <div class="preloader"></div>
        <div class="ptr-arrow"></div>
      </div>
      
      <!-- Wallpapers Grid -->
      <div class="wallpapers-grid">
        ${wallpapers.map((wallpaper) => $h`
          <div class="wallpaper-item elevation-2" @click=${()=> openWallpaper(wallpaper)}>
            <div class="progressive-image ${wallpaper.loaded ? 'loaded' : ''}">
              <img 
                class="placeholder"
                src="${wallpaper.placeholderUrl}" 
                alt="${wallpaper.title}"
              />
              <img 
                class="full-image"
                src="${wallpaper.thumbnailUrl}" 
                loading="lazy" 
                alt="${wallpaper.title}"
                @load=${() => handleImageLoad(wallpaper)}
                @error=${(e) => handleImageError(e, wallpaper)}
              />
            </div>
            <div class="wallpaper-info">
              <span class="resolution">${wallpaper.resolution}</span>
              <div class="stats">
                <span><i class="icon f7-icons">eye</i> ${wallpaper.views}</span>
                <span><i class="icon f7-icons">heart</i> ${wallpaper.favorites}</span>
              </div>
            </div>
          </div>
        `)}
      </div>

      <!-- Loading spinner -->
      ${loading && $h`
        <div class="preloader infinite-scroll-preloader"></div>
      `}

      ${noMoreItems && $h`
        <div class="block block-strong text-align-center no-more">
          <span>You've reached the end</span>
        </div>
      `}
    </div>
  </div>
</template>

<script>
export default (props, { $f7, $store, $on, $update }) => {
  let wallpapers = [];
  let loading = false;
  let page = 1;
  let noMoreItems = false;
  let infiniteScrollDetached = false;

  // Load initial wallpapers
  loadWallpapers();

  async function loadWallpapers(reset = false) {
    if (loading || (noMoreItems && !reset)) return;
    
    loading = true;
    $update();

    try {
      if (reset) {
        page = 1;
        wallpapers = [];
        noMoreItems = false;
        if (infiniteScrollDetached) {
          $f7.infiniteScroll.attach('.infinite-scroll-content');
          infiniteScrollDetached = false;
        }
      }

      console.log('Fetching wallpapers for page:', page);
      const newWallpapers = await $store.dispatch('fetchWallpapers', { page });
      console.log('Received wallpapers:', newWallpapers);
      
      if (!newWallpapers || newWallpapers.length === 0) {
        noMoreItems = true;
        if (!infiniteScrollDetached) {
          $f7.infiniteScroll.detach('.infinite-scroll-content');
          infiniteScrollDetached = true;
        }
      } else {
        wallpapers = [...wallpapers, ...newWallpapers];
        page += 1;
      }
    } catch (error) {
      console.error('Error in loadWallpapers:', error);
      $f7.toast.show({
        text: 'Error loading wallpapers',
        closeTimeout: 2000,
      });
    }

    loading = false;
    $update();
  }

  function loadMore(e, done) {
    loadWallpapers().then(() => {
      if (done) done();
    });
  }

  function onRefresh(e, done) {
    loadWallpapers(true).then(() => {
      done();
    });
  }

  function openWallpaper(wallpaper) {
    $f7.views.main.router.navigate('/wallpaper/', {
      props: {
        wallpaper
      }
    });
  }

  function handleImageLoad(wallpaper) {
    wallpaper.loaded = true;
    $update();
  }

  function handleImageError(event, wallpaper) {
    const img = event.target;
    const currentUrl = img.src;
    
    // Try next fallback URL
    const nextUrl = wallpaper.fallbackUrls.find(url => url !== currentUrl);
    if (nextUrl) {
      img.src = nextUrl;
    }
  }

  // Initialize searchbar
  $on('pageInit', () => {
    const searchbar = $f7.searchbar.create({
      el: '.searchbar-wallpapers',
      searchContainer: '.wallpapers-grid',
      searchIn: '.wallpaper-item img',
      on: {
        search(sb, query) {
          if (query.length > 2) {
            $store.dispatch('searchWallpapers', query);
          }
        }
      }
    });
  });

  // Cleanup on page leave
  $on('pageBeforeOut', () => {
    if (!infiniteScrollDetached) {
      $f7.infiniteScroll.detach('.infinite-scroll-content');
      infiniteScrollDetached = true;
    }
  });

  return $render;
}
</script>

<style>
:root {
  --f7-navbar-bg-color: #ffffff;
  --f7-navbar-height: 60px;
}

.navbar {
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
}

.navbar .logo {
  font-size: 20px;
  font-weight: 700;
  padding-left: 16px;
  color: #333;
}

.navbar .logo span {
  color: var(--f7-theme-color);
}

.categories-scrollbar {
  background: #fff;
  position: sticky;
  top: var(--f7-navbar-height);
  z-index: 100;
  border-bottom: 1px solid rgba(0,0,0,0.05);
}

.categories {
  padding: 12px 16px;
  display: flex;
  gap: 8px;
  overflow-x: auto;
  -webkit-overflow-scrolling: touch;
  scrollbar-width: none;
  -ms-overflow-style: none;
}

.categories::-webkit-scrollbar {
  display: none;
}

.category-chip {
  padding: 6px 16px;
  border-radius: 100px;
  background: #f5f5f5;
  color: #666;
  font-size: 14px;
  white-space: nowrap;
  transition: all 0.3s ease;
}

.category-chip.active {
  background: var(--f7-theme-color);
  color: #fff;
}

.wallpapers-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 12px;
  padding: 12px;
}

.wallpaper-item {
  position: relative;
  border-radius: 12px;
  overflow: hidden;
  aspect-ratio: 9/16;
  background: #f5f5f5;
  transition: transform 0.2s ease;
}

.wallpaper-item:active {
  transform: scale(0.98);
}

.wallpaper-item img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.wallpaper-info {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 12px;
  background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
  color: #fff;
  font-size: 12px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.wallpaper-item:hover .wallpaper-info {
  opacity: 1;
}

.wallpaper-info .resolution {
  font-weight: 500;
}

.wallpaper-info .stats {
  display: flex;
  gap: 12px;
  margin-top: 4px;
}

.wallpaper-info .stats span {
  display: flex;
  align-items: center;
  gap: 4px;
}

.wallpaper-info .stats i {
  font-size: 14px;
}

.no-more {
  color: #666;
  font-size: 14px;
  margin-top: 20px;
}

.infinite-scroll-preloader {
  margin-top: 20px;
  margin-bottom: 20px;
}

.searchbar {
  display: none; /* Hide by default */
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  background: #fff;
  z-index: 200;
}

.searchbar.searchbar-enabled {
  display: block;
}

.searchbar-overlay {
  display: none;
  position: fixed;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.4);
  z-index: 100;
  animation: fadeIn 0.2s ease;
}

.searchbar-enabled ~ .searchbar-overlay {
  display: block;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.searchbar-inner {
  background: #f5f5f5;
  border-radius: 100px;
}

@media (max-width: 480px) {
  .wallpapers-grid {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 8px;
    padding: 8px;
  }
}

.progressive-image {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.progressive-image .placeholder {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  filter: blur(10px);
  transform: scale(1.1);
  transition: opacity 0.3s ease;
}

.progressive-image .full-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.progressive-image.loaded .placeholder {
  opacity: 0;
}

.progressive-image.loaded .full-image {
  opacity: 1;
}
</style>