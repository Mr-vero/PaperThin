<template>
  <div class="page" data-name="wallpaper">
    <!-- Floating Navbar -->
    <div class="navbar no-shadow floating-navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon f7-icons">chevron_left</i>
          </a>
        </div>
        <div class="right">
          <a href="#" class="link" @click=${openFullscreen}>
            <i class="icon f7-icons">crop_rotate</i>
          </a>
          <a href="#" class="link download-button" @click=${handleDownload}>
            <i class="icon f7-icons">arrow_down_circle_fill</i>
          </a>
        </div>
      </div>
    </div>

    <!-- Wallpaper Content -->
    <div class="page-content">
      <div class="wallpaper-container">
        <!-- Main Image -->
        <div class="wallpaper-preview">
          <img src="${wallpaper.fullUrl}" alt="${wallpaper.title}" @click=${openFullscreen} />
        </div>
        
        <!-- Info Card -->
        <div class="info-card">
          <div class="resolution-tag">${wallpaper.resolution}</div>
          
          <div class="stats-grid">
            <div class="stat-item">
              <i class="icon f7-icons">eye_fill</i>
              <span class="value">${formatNumber(wallpaper.views)}</span>
              <span class="label">Views</span>
            </div>
            <div class="stat-item">
              <i class="icon f7-icons">heart_fill</i>
              <span class="value">${formatNumber(wallpaper.favorites)}</span>
              <span class="label">Favorites</span>
            </div>
            <div class="stat-item">
              <i class="icon f7-icons">photo_fill</i>
              <span class="value">${getFileSize()}</span>
              <span class="label">Size</span>
            </div>
          </div>

          <div class="action-button" @click=${handleDownload}>
            <i class="icon f7-icons">arrow_down_circle_fill</i>
            <span>Download Wallpaper</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default (props, { $f7 }) => {
  const wallpaper = props.wallpaper;
  let photoBrowser;

  const formatNumber = (num) => {
    if (num >= 1000000) return `${(num/1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num/1000).toFixed(1)}K`;
    return num;
  };

  const getFileSize = () => {
    // Estimate file size based on resolution
    const [width, height] = wallpaper.resolution.split('x');
    const pixels = width * height;
    const sizeInMB = (pixels * 3 / (1024 * 1024)).toFixed(1);
    return `${sizeInMB}MB`;
  };

  const handleDownload = () => {
    try {
      // Show progress indicator
      $f7.dialog.preloader('Preparing Download...');

      const img = new Image();
      img.crossOrigin = 'anonymous';
      
      img.onload = () => {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        
        try {
          const dataUrl = canvas.toDataURL('image/jpeg', 1.0);
          const link = document.createElement('a');
          
          const resolution = wallpaper.resolution.replace(' ', '');
          const filename = `paperthin_${resolution}.jpg`;
          
          link.download = filename;
          link.href = dataUrl;
          link.className = 'external';
          
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          
          $f7.dialog.close();
          
          // Show success notification
          $f7.notification.create({
            icon: '<i class="icon f7-icons">checkmark_circle_fill</i>',
            title: 'Download Complete',
            subtitle: filename,
            closeTimeout: 3000,
          }).open();
          
        } catch (e) {
          console.error('Export failed:', e);
          showError();
        }
      };
      
      img.onerror = showError;
      img.src = `https://api.codetabs.com/v1/proxy?quest=${encodeURIComponent(wallpaper.fullUrl)}`;
      
    } catch (error) {
      console.error('Download failed:', error);
      showError();
    }
  };

  const showError = () => {
    $f7.dialog.close();
    $f7.notification.create({
      icon: '<i class="icon f7-icons">xmark_circle_fill</i>',
      title: 'Download Failed',
      subtitle: 'Please try again',
      closeTimeout: 3000,
    }).open();
  };

  const openFullscreen = () => {
    if (!photoBrowser) {
      photoBrowser = $f7.photoBrowser.create({
        photos: [{ url: wallpaper.fullUrl }],
        theme: 'dark',
        type: 'standalone',
        zoom: { enabled: true, maxRatio: 3, minRatio: 1 },
        swipeToClose: true,
        navbar: true,
        toolbar: false,
      });
    }
    photoBrowser.open();
  };

  return $render;
}
</script>

<style>
/* Main Layout */
.page {
  background: #f8f9fa;
}

.floating-navbar {
  background: transparent !important;
  --f7-navbar-bg-color: transparent;
  --f7-navbar-text-color: #fff;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
}

.floating-navbar .navbar-bg {
  background: linear-gradient(to bottom, rgba(0,0,0,0.4), transparent);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
}

.floating-navbar .link i {
  font-size: 24px;
  color: #fff;
}

.wallpaper-container {
  min-height: 100%;
  display: flex;
  flex-direction: column;
}

/* Wallpaper Preview */
.wallpaper-preview {
  position: relative;
  height: 70vh;
  background: #000;
  overflow: hidden;
}

.wallpaper-preview img {
  width: 100%;
  height: 100%;
  object-fit: contain;
}

/* Info Card */
.info-card {
  background: #fff;
  border-radius: 24px 24px 0 0;
  padding: 24px;
  margin-top: -24px;
  box-shadow: 0 -4px 20px rgba(0,0,0,0.1);
  position: relative;
  z-index: 1;
}

.resolution-tag {
  display: inline-block;
  background: #f0f2f5;
  color: #1f2937;
  padding: 6px 12px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 600;
  margin-bottom: 20px;
}

.stats-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 16px;
  margin-bottom: 24px;
}

.stat-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

.stat-item i {
  font-size: 24px;
  color: #4f46e5;
  margin-bottom: 8px;
}

.stat-item .value {
  font-size: 18px;
  font-weight: 600;
  color: #1f2937;
  margin-bottom: 4px;
}

.stat-item .label {
  font-size: 12px;
  color: #6b7280;
}

.action-button {
  background: #4f46e5;
  color: #fff;
  padding: 16px;
  border-radius: 12px;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: transform 0.2s, background 0.2s;
}

.action-button:active {
  transform: scale(0.98);
  background: #4338ca;
}

.action-button i {
  font-size: 20px;
}

/* PhotoBrowser Overrides */
:root {
  --f7-photobrowser-bg-color: #000;
}

.photo-browser-page .navbar {
  background: rgba(0,0,0,0.8) !important;
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
}
</style> 