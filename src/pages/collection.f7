<template>
  <div class="page" data-name="collection">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Back</span>
          </a>
        </div>
        <div class="title">${collection ? collection.name : 'Collection'}</div>
        <div class="right">
          <a href="#" class="link" @click=${openActions}>
            <i class="icon f7-icons">ellipsis_vertical</i>
          </a>
        </div>
      </div>
    </div>

    <div class="page-content">
      ${collection && collection.wallpapers.length > 0 ? $h`
        <div class="wallpapers-grid">
          ${collection.wallpapers.map((wallpaper) => $h`
            <div class="wallpaper-card" @click=${() => openWallpaper(wallpaper)}>
              <img 
                src="${wallpaper.thumbnailUrl}" 
                alt="${wallpaper.title || 'Wallpaper'}"
                loading="lazy"
                @error=${(e) => handleImageError(e, wallpaper)}
              />
            </div>
          `)}
        </div>
      ` : $h`
        <div class="no-wallpapers">
          <i class="icon f7-icons">photo</i>
          <p>No wallpapers in this collection</p>
        </div>
      `}
    </div>
  </div>
</template>

<script>
export default (props, { $f7, $store, $on, $update, $f7route }) => {
  let collection = null;

  // Load collection on mount
  $on('pageInit', () => {
    loadCollection();
  });

  async function loadCollection() {
    const collections = await $store.dispatch('fetchCollections');
    collection = collections.find(c => c.id === $f7route.params.id);
    $update();
  }

  function openWallpaper(wallpaper) {
    $f7.views.main.router.navigate('/wallpaper/', {
      props: {
        wallpaper
      }
    });
  }

  function handleImageError(event, wallpaper) {
    const img = event.target;
    if (wallpaper.fallbackUrls && wallpaper.fallbackUrls.length > 0) {
      const currentUrl = img.src;
      const nextUrl = wallpaper.fallbackUrls.find(url => url !== currentUrl);
      if (nextUrl) {
        img.src = nextUrl;
      }
    }
  }

  function openActions() {
    $f7.actions.create({
      buttons: [
        [
          {
            text: 'Collection Options',
            label: true
          },
          {
            text: 'Rename Collection',
            onClick: () => {
              $f7.dialog.prompt('Collection Name', collection.name, async (name) => {
                if (name.trim() && name !== collection.name) {
                  await $store.dispatch('renameCollection', { 
                    id: collection.id, 
                    name 
                  });
                  loadCollection();
                }
              });
            }
          },
          {
            text: 'Delete Collection',
            color: 'red',
            onClick: async () => {
              $f7.dialog.confirm(
                'Are you sure you want to delete this collection?', 
                'Delete Collection',
                async () => {
                  await $store.dispatch('deleteCollection', { id: collection.id });
                  $f7.views.main.router.back();
                }
              );
            }
          }
        ],
        [
          {
            text: 'Cancel',
            color: 'red'
          }
        ]
      ]
    }).open();
  }

  return $render;
}
</script>

<style>
.wallpapers-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
  gap: 8px;
  padding: 8px;
}

.wallpaper-card {
  aspect-ratio: 16/9;
  border-radius: 8px;
  overflow: hidden;
  background: #f5f5f5;
  position: relative;
}

.wallpaper-card img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.2s ease;
}

.wallpaper-card:active img {
  transform: scale(0.98);
}

.no-wallpapers {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  padding: 32px;
  color: #666;
  text-align: center;
}

.no-wallpapers .icon {
  font-size: 48px;
  margin-bottom: 16px;
  color: #999;
}

.no-wallpapers p {
  margin: 0;
  font-size: 16px;
}

@media (max-width: 480px) {
  .wallpapers-grid {
    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
    gap: 6px;
    padding: 6px;
  }
}
</style> 