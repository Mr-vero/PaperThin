<template>
  <div class="page no-toolbar" data-name="collection">
    <div class="navbar">
      <div class="navbar-bg"></div>
      <div class="navbar-inner sliding">
        <div class="left">
          <a href="#" class="link back">
            <i class="icon icon-back"></i>
            <span class="if-not-md">Back</span>
          </a>
        </div>
        <div class="title">${collection ? collection.name : 'Collection'}</div>
        <div class="right">
          <a href="#" class="link" @click=${openActions}>
            <i class="icon f7-icons">ellipsis_vertical</i>
          </a>
        </div>
      </div>
    </div>

    <div class="page-content">
      <div class="wallpapers-grid" style="padding-top: 80px">
        ${collection?.wallpapers?.map((wallpaper) => $h`
          <div class="wallpaper-item" @click=${() => openWallpaper(wallpaper)}>
            <div class="progressive-image ${wallpaper.loaded ? 'loaded' : ''}">
              <img 
                class="placeholder"
                src="${wallpaper.path}" 
                alt="${wallpaper.title || 'Wallpaper'}"
              />
              <img 
                class="full-image"
                src="${wallpaper.path}" 
                loading="lazy"
                alt="${wallpaper.title || 'Wallpaper'}"
                @load=${() => handleImageLoad(wallpaper)}
                @error=${(e) => handleImageError(e, wallpaper)}
              />
            </div>
            <div class="wallpaper-info">
              <span class="resolution">${wallpaper.resolution}</span>
              <div class="stats">
                <span><i class="icon f7-icons">eye</i> ${wallpaper.views || 0}</span>
                <span><i class="icon f7-icons">heart</i> ${wallpaper.favorites || 0}</span>
              </div>
            </div>
          </div>
        `)}
      </div>
    </div>
  </div>
</template>

<script>
export default (props, { $f7, $store, $on, $update, $f7route }) => {
  let collection = null;

  $on('pageInit', () => {
    loadCollection();
  });

  async function loadCollection() {
    const collections = await $store.dispatch('fetchCollections');
    collection = collections.find(c => c.id === $f7route.params.id);
    // Initialize loaded property for each wallpaper
    if (collection?.wallpapers) {
      collection.wallpapers = collection.wallpapers.map(w => ({
        ...w,
        loaded: false
      }));
    }
    $update();
  }

  function handleImageLoad(wallpaper) {
    wallpaper.loaded = true;
    $update();
  }

  function handleImageError(event, wallpaper) {
    const img = event.target;
    // If thumbnail fails, try full URL
    if (img.src === wallpaper.path && wallpaper.fullUrl) {
      img.src = wallpaper.fullUrl;
    }
  }

  function openWallpaper(wallpaper) {
    $f7.views.current.router.navigate('/wallpaper/', {
      props: {
        wallpaper: {
          id: wallpaper.id,
          title: wallpaper.title,
          fullUrl: wallpaper.fullUrl,
          path: wallpaper.path,
          resolution: wallpaper.resolution,
          views: wallpaper.views || 0,
          favorites: wallpaper.favorites || 0
        }
      }
    });
  }

  function openActions() {
    $f7.actions.create({
      buttons: [
        [
          {
            text: 'Collection Options',
            label: true
          },
          {
            text: 'Rename Collection',
            onClick: () => {
              $f7.dialog.prompt('Collection Name', collection.name, async (name) => {
                if (name.trim() && name !== collection.name) {
                  await $store.dispatch('renameCollection', { 
                    id: collection.id, 
                    name 
                  });
                  loadCollection();
                }
              });
            }
          },
          {
            text: 'Delete Collection',
            color: 'red',
            onClick: async () => {
              $f7.dialog.confirm(
                'Are you sure you want to delete this collection?', 
                'Delete Collection',
                async () => {
                  await $store.dispatch('deleteCollection', { id: collection.id });
                  $f7.views.main.router.back();
                }
              );
            }
          }
        ],
        [
          {
            text: 'Cancel',
            color: 'red'
          }
        ]
      ]
    }).open();
  }

  return $render;
}
</script>

<style>
.wallpapers-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
  gap: 12px;
  padding: 12px;
  margin: 0;
  padding-bottom: calc(var(--f7-toolbar-height) + 68px);
}

.wallpaper-item {
  position: relative;
  border-radius: 12px;
  overflow: hidden;
  aspect-ratio: 9/16;
  background: #f5f5f5;
  transition: transform 0.2s ease;
}

.wallpaper-item:active {
  transform: scale(0.98);
}

.progressive-image {
  position: relative;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.progressive-image .placeholder {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  filter: blur(10px);
  transform: scale(1.1);
  transition: opacity 0.3s ease;
}

.progressive-image .full-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.progressive-image.loaded .placeholder {
  opacity: 0;
}

.progressive-image.loaded .full-image {
  opacity: 1;
}

.wallpaper-info {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 12px;
  background: linear-gradient(to top, rgba(0,0,0,0.7), transparent);
  color: #fff;
  font-size: 12px;
  opacity: 0;
  transition: opacity 0.2s ease;
}

.wallpaper-item:hover .wallpaper-info {
  opacity: 1;
}

.wallpaper-info .resolution {
  font-weight: 500;
}

.wallpaper-info .stats {
  display: flex;
  gap: 12px;
  margin-top: 4px;
}

.wallpaper-info .stats span {
  display: flex;
  align-items: center;
  gap: 4px;
}

.wallpaper-info .stats i {
  font-size: 14px;
}

@media (max-width: 480px) {
  .wallpapers-grid {
    grid-template-columns: repeat(auto-fill, minmax(80px, 1fr));
    gap: 8px;
    padding: 8px;
  }
}
</style> 